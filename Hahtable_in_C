

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

#define size 100

struct HN{
    int key;
    int data;
};

struct HN* HA[size];

int HF(int key){
    return key%size;
}

void insert(int key, int data){
    int HI;
   struct HN* item;
    
    item = (struct HN*)malloc(sizeof(struct HN));
    
    item->key = key;
    item->data = data;
    
    HI = HF(key);
    
    while(HA[HI]!=NULL){
        HI++;
        HI%=size;
    }
    
    HA[HI]=item;
}

struct HN* search(int key){
    int HI = HF(key);
    
    while(HA[HI] != NULL){
        if(HA[HI]->key == key)
            return HA[HI];
        else{
            HI++;
            HI %= size;
        }
        
    }
    return NULL;
    
}


int delete(int key){
    
    int HI = HF(key);
    
    while(HA[HI] != NULL){
        if(HA[HI]->key == key){
            free(HA[HI]);
            HA[HI] = NULL;
            return 1;
        }
        
        HI++;
        HI%=size;
    }
    return 0;
}

void display() {
   int i = 0;
	
   for(i = 0; i<size; i++) {
	
      if(HA[i] != NULL)
         printf(" (%d,%d)",HA[i]->key,HA[i]->data);
      else
         printf(" ~~ ");
   }
	
   printf("\n");
}

int* twoSum(int* nums, int numsSize, int target, int* returnSize){

    int result[2];
    
    for(int i = 0;i<numsSize;i++){
        insert(nums[i],nums[i]);
    }
    
    for(int i = 0;i<numsSize;i++){
        if(search(target - nums[i]) != NULL){
           result[0] = i;
            for(int j=0;j<numsSize;j++){
                if(nums[j] == (target - nums[i]))
                    result[1] = j;
            }
            return result; 
        }
    
    }
    return NULL;
}
